"""Замыкания возникают только при наличие вложенных функций.
Замыкания - это функции, которые могут обращаться к переменным (на 
которых есть ссылка в этой функции) из неглобального скоупа.
"""
# Пример: вычисление среднего продолжающегося ряда.
def make_average():  # функция высшего порядка.
    series = []
    num = 1

    def averager(new_value):  # вложенная функция
        # ф-ция averager ссылается на нелокальную и неглобальную
        # переменную series
        nonlocal num  # перемернная num также станет свободной переменной
        series.append(new_value)
        return sum(series) / len(series)
    
    return averager


def main():
    # После присвоения результата make_average переменной, avg 
    # локальная область видимости make_average стирается. Однако, из-за
    # того, что замыкание averager ссылалось на series переменная не 
    # стирается и становится сободной переменной.
    avg = make_average()
    print(avg(10))  # 10.0
    print(avg(11))  # 10.5
    print(avg(12))  # 11.0

    # Для того, чтобы инспектировать локальные и свободные переменные у
    # объекта ф-ции есть аттрибут __code__ (откомпилированное тело 
    # ф-ции).
    print(avg.__code__.co_freevars)  # ('num', 'series',)
    print(avg.__code__.co_varnames)  # ('new_value',)


if __name__ == "__main__":
    main()
