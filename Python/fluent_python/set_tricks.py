"""
    Множества - уникальный нвбор объектов.
    set - изменяемый объект-контейнер, содержащий неизменяемые объекты.
    frozenset - неизменяемый объект-контейнер, содержащий неизменяемые объекты.
"""
st = set([1, 1, 2, 2, 3, 3, 4, 5, 6, 'wtf', 'wtf'])
print(st)  # {1, 2, 3, 4, 5, 6, 'wtf'}
"""
    Использовать синтаксическую конструкции для создания множеств 
    дешевле. Пример: 

    >>> from dis import dis
    >>> dis('set([1, 1])')  # для создания мн-ва таким способом необходимо 6 спец. вызова интерпритатора.
    1           0 LOAD_NAME                0 (set)
                2 LOAD_CONST               0 (1)
                4 LOAD_CONST               0 (1)
                6 BUILD_LIST               2
                8 CALL_FUNCTION            1
                10 RETURN_VALUE
    >>> dis('{1, 1}')  # для создания мн-ва таким способом необходимо 4 спец. вызова интерпритатора.
    1           0 LOAD_CONST               0 (1)
                2 LOAD_CONST               0 (1)
                4 BUILD_SET                2
                6 RETURN_VALUE
"""
fst = frozenset([1, 1, 2, 2, 3, 3, 4, 5, 6, 'wtf', 'wtf'])  # Для frozenset специальной синтаксической конструкции нет.


"""
    setcomp (Множественное включение)
"""
from unicodedata import name

st = {chr(i) for i in range(32, 255) if 'SIGN' in name(chr(i), '')}
print(st)  # {'®', '¬', '¤', '¶', 'µ', '±', '+', '§', '$', '¥', '£', '×', '#', '<', '=', '%', '¢', '÷', '©', '>', '°'}


"""
    Существует множество различных математических операций с мн-вами.
    Например:
"""
st_0 = {1, 2, 3, 4}
st_1 = {3, 4, 5}
# Пересечение множеств. Альтернативный вызов st_0.intersection(st_1) - аргумент итерируемый объект.
print(st_0 & st_1)  # {3, 4}
# Объединение множеств. Альтернативный вызов st_0.union(st_1) - аргумент итерируемый объект.
print(st_0 | st_1)  # {1, 2, 3, 4, 5}
# Симметрическая разность. Алтернативный вызов st_0.symmetric_difference_update(st_1) - аргумент итерируемый объект.
print(st_0 ^ st_1)  # {1, 2, 5}
